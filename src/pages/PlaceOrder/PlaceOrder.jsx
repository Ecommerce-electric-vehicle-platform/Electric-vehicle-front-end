import React, { useState, useEffect } from 'react';
import { useParams, useNavigate, useLocation } from 'react-router-dom';
import {
    ArrowLeft,
    MapPin,
    Phone,
    User,
    CreditCard,
    Truck,
    CheckCircle,
    AlertCircle,
    Clock,
    Package,
    Home,
    Wallet,
    XCircle,
    ShoppingCart,
    Settings
} from 'lucide-react';
import { vehicleProducts, batteryProducts, formatCurrency } from '../../test-mock-data/data/productsData';
import DebugPanel from '../../components/DebugPanel/DebugPanel';
import TestEnvironmentSetup from '../../test-mock-data/components/TestEnvironmentSetup/TestEnvironmentSetup';
import './PlaceOrder.css';

function PlaceOrder() {
    const { id } = useParams();
    const navigate = useNavigate();
    const location = useLocation();
    const [product, setProduct] = useState(null);
    const [isGuest, setIsGuest] = useState(true);

    // States cho c√°c b∆∞·ªõc ki·ªÉm tra
    const [validationStep, setValidationStep] = useState('checking'); // checking, wallet_required, product_check, seller_check, payment, success
    const [hasWallet, setHasWallet] = useState(false);
    const [productAvailable, setProductAvailable] = useState(true);
    const [showModal, setShowModal] = useState(false);
    const [showDebugPanel, setShowDebugPanel] = useState(false);
    const [modalConfig, setModalConfig] = useState({
        type: 'info', // info, warning, error, success
        title: '',
        message: '',
        actions: []
    });

    const [orderData, setOrderData] = useState({
        // Core order information
        order_id: null,
        order_code: '',
        status: 'pending', // M·∫∑c ƒë·ªãnh pending khi buyer ƒë·∫∑t h√†ng

        // User and admin information
        admin_id: null,
        buyer_id: null,

        // Product and shipping information
        post_product_id: null,
        shipping_partner_id: null,
        shipping_address: '',
        phone_number: '',
        shipping_fee: 0,

        // Additional order details
        buyer_name: '',
        buyer_email: '',
        buyer_address: '',
        delivery_phone: '',
        delivery_note: '',
        payment_method: 'wallet', // wallet, cod
        quantity: 1,
        total_price: 0,
        final_price: 0,

        // Invoice information
        need_order_invoice: false, // true, false

        // Timestamps
        created_at: null,
        updated_at: null,
        cancel_at: null,
        cancel_reason: ''
    });

    const [currentStep, setCurrentStep] = useState(1);
    const [isSubmitting, setIsSubmitting] = useState(false);
    const [orderId, setOrderId] = useState(null);

    // Generate unique order code
    const generateOrderCode = () => {
        const timestamp = Date.now();
        const random = Math.floor(Math.random() * 1000).toString().padStart(3, '0');
        return `ORD${timestamp}${random}`;
    };

    // Ki·ªÉm tra ƒëƒÉng nh·∫≠p
    useEffect(() => {
        const token = localStorage.getItem('token');
        setIsGuest(!token);

        if (!token) {
            navigate('/signin');
            return;
        }

        // Validation s·∫Ω ƒë∆∞·ª£c b·∫Øt ƒë·∫ßu t·ª± ƒë·ªông khi product ƒë∆∞·ª£c load
    }, [navigate]);

    // T√¨m s·∫£n ph·∫©m
    useEffect(() => {
        console.log('üîç Debug product search:');
        console.log('   Looking for product ID:', id);

        const allProducts = [...vehicleProducts, ...batteryProducts];
        console.log('   Total products available:', allProducts.length);
        console.log('   Available product IDs:', allProducts.map(p => p.id));

        const foundProduct = allProducts.find(p => p.id === parseInt(id));
        console.log('   Found product:', foundProduct);

        setProduct(foundProduct);

        if (foundProduct) {
            console.log('   ‚úÖ Product found, setting up order data');
            const defaultShippingFee = 50000;
            setOrderData(prev => ({
                ...prev,
                post_product_id: foundProduct.id,
                total_price: foundProduct.price,
                shipping_fee: defaultShippingFee,
                final_price: foundProduct.price + defaultShippingFee,
                order_code: generateOrderCode()
            }));
        } else {
            console.log('   ‚ùå Product not found');
        }
    }, [id]);

    // L·∫•y th√¥ng tin t·ª´ state (ch·ªâ khi c√≥ product trong state v√† ch∆∞a c√≥ product t·ª´ URL)
    useEffect(() => {
        if (location.state?.product && !product) {
            console.log('üîç Setting product from location.state:', location.state.product);
            setProduct(location.state.product);
            const defaultShippingFee = 50000;
            setOrderData(prev => ({
                ...prev,
                post_product_id: location.state.product.id,
                total_price: location.state.product.price,
                shipping_fee: defaultShippingFee,
                final_price: location.state.product.price + defaultShippingFee,
                order_code: generateOrderCode()
            }));
        }
    }, [location.state, product]);

    // T·ª± ƒë·ªông b·∫Øt ƒë·∫ßu validation khi product ƒë√£ ƒë∆∞·ª£c load
    useEffect(() => {
        if (product && validationStep === 'checking') {
            console.log('üîç Product loaded, starting validation...');
            startValidationProcess();
        }
    }, [product]);

    // Quy tr√¨nh ki·ªÉm tra validation
    const startValidationProcess = async () => {
        console.log('üöÄ Starting validation process...');
        console.log('üîç Current product state:', product);
        console.log('üîç Product ID from URL:', id);
        setValidationStep('checking');

        // Gi·∫£ l·∫≠p delay ƒë·ªÉ hi·ªÉn th·ªã loading
        await new Promise(resolve => setTimeout(resolve, 1000));

        // B∆∞·ªõc 1: Ki·ªÉm tra v√≠ ƒëi·ªán t·ª≠
        console.log('üîç Step 1: Checking wallet...');
        const walletLinked = checkWalletStatus();

        if (!walletLinked) {
            console.log('   ‚ùå Wallet not linked');
            setValidationStep('wallet_required');
            showWalletRequiredModal();
            return;
        }
        console.log('   ‚úÖ Wallet is linked');

        // B∆∞·ªõc 2: Ki·ªÉm tra tr·∫°ng th√°i s·∫£n ph·∫©m
        console.log('üîç Step 2: Checking product availability...');
        console.log('üîç Product before availability check:', product);

        // ƒê·∫£m b·∫£o product c√≥ s·∫µn tr∆∞·ªõc khi ki·ªÉm tra
        if (!product) {
            console.log('   ‚ùå No product available for checking');
            setValidationStep('product_unavailable');
            showProductUnavailableModal();
            return;
        }

        await new Promise(resolve => setTimeout(resolve, 500));
        const productStatus = checkProductAvailability();

        if (!productStatus.available) {
            console.log('   ‚ùå Product not available:', productStatus.reason);
            setValidationStep('product_unavailable');
            showProductUnavailableModal();
            return;
        }
        console.log('   ‚úÖ Product is available');

        // B∆∞·ªõc 3: Ki·ªÉm tra ng∆∞·ªùi b√°n (n·∫øu c√≥ nhi·ªÅu s·∫£n ph·∫©m trong gi·ªè)
        console.log('üîç Step 3: Checking multiple sellers...');
        await new Promise(resolve => setTimeout(resolve, 500));
        const sellerCheck = checkMultipleSellers();

        if (!sellerCheck.valid) {
            console.log('   ‚ùå Multiple sellers detected');
            setValidationStep('multiple_sellers');
            showMultipleSellersModal();
            return;
        }
        console.log('   ‚úÖ Single seller confirmed');

        // T·∫•t c·∫£ ki·ªÉm tra ƒë·ªÅu pass -> chuy·ªÉn sang form ƒë·∫∑t h√†ng
        console.log('‚úÖ All validations passed, proceeding to payment form');
        setValidationStep('payment');
    };

    // Ki·ªÉm tra tr·∫°ng th√°i v√≠
    const checkWalletStatus = () => {
        // Gi·∫£ l·∫≠p ki·ªÉm tra v√≠ - trong th·ª±c t·∫ø s·∫Ω g·ªçi API
        const walletStatus = localStorage.getItem('walletLinked');
        const isLinked = walletStatus === 'true';
        setHasWallet(isLinked);

        // Gi·∫£ l·∫≠p: N·∫øu ch∆∞a c√≥ setting th√¨ m·∫∑c ƒë·ªãnh l√† ƒë√£ li√™n k·∫øt ƒë·ªÉ test flow
        if (walletStatus === null) {
            localStorage.setItem('walletLinked', 'true');
            setHasWallet(true);
            return true;
        }

        return isLinked;
    };

    // Ki·ªÉm tra s·∫£n ph·∫©m c√≤n h√†ng
    const checkProductAvailability = () => {
        console.log('üîç Debug checkProductAvailability:');
        console.log('   Product:', product);
        console.log('   Product ID:', product?.id);
        console.log('   Product Status:', product?.status);

        // Gi·∫£ l·∫≠p ki·ªÉm tra - trong th·ª±c t·∫ø s·∫Ω g·ªçi API
        if (product) {
            // Gi·∫£ l·∫≠p: C√≥ th·ªÉ test c√°c tr∆∞·ªùng h·ª£p kh√°c nhau
            const testScenario = localStorage.getItem('testProductScenario');
            console.log('   Test Scenario:', testScenario);

            if (testScenario === 'sold') {
                console.log('   ‚ùå Test scenario: SOLD');
                setProductAvailable(false);
                return { available: false, reason: 'S·∫£n ph·∫©m ƒë√£ ƒë∆∞·ª£c b√°n' };
            }

            if (testScenario === 'unavailable') {
                console.log('   ‚ùå Test scenario: UNAVAILABLE');
                setProductAvailable(false);
                return { available: false, reason: 'S·∫£n ph·∫©m t·∫°m th·ªùi kh√¥ng c√≥ s·∫µn' };
            }

            // Ki·ªÉm tra tr·∫°ng th√°i th·ª±c t·∫ø c·ªßa s·∫£n ph·∫©m
            if (product.status === 'sold') {
                console.log('   ‚ùå Product status: SOLD');
                setProductAvailable(false);
                return { available: false, reason: 'S·∫£n ph·∫©m ƒë√£ ƒë∆∞·ª£c b√°n' };
            }

            if (product.status === 'unavailable') {
                console.log('   ‚ùå Product status: UNAVAILABLE');
                setProductAvailable(false);
                return { available: false, reason: 'S·∫£n ph·∫©m t·∫°m th·ªùi kh√¥ng c√≥ s·∫µn' };
            }

            // M·∫∑c ƒë·ªãnh: s·∫£n ph·∫©m c√≥ s·∫µn
            console.log('   ‚úÖ Product is AVAILABLE');
            setProductAvailable(true);
            return { available: true, reason: null };
        }
        console.log('   ‚ùå No product found');
        return { available: false, reason: 'Kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m' };
    };

    // Ki·ªÉm tra nhi·ªÅu ng∆∞·ªùi b√°n
    const checkMultipleSellers = () => {
        // Gi·∫£ l·∫≠p ki·ªÉm tra - trong th·ª±c t·∫ø s·∫Ω ki·ªÉm tra gi·ªè h√†ng
        const testScenario = localStorage.getItem('testMultipleSellers');

        if (testScenario === 'true') {
            return {
                valid: false,
                sellers: ['seller1', 'seller2'],
                message: 'M·ªói ƒë∆°n h√†ng ch·ªâ ƒë∆∞·ª£c ch·ª©a s·∫£n ph·∫©m t·ª´ m·ªôt ng∆∞·ªùi b√°n'
            };
        }

        // M·∫∑c ƒë·ªãnh: ch·ªâ c√≥ 1 ng∆∞·ªùi b√°n (valid)
        return { valid: true, sellers: ['seller1'] };
    };

    // Hi·ªÉn th·ªã modal y√™u c·∫ßu li√™n k·∫øt v√≠
    const showWalletRequiredModal = () => {
        setModalConfig({
            type: 'warning',
            title: 'Y√™u c·∫ßu li√™n k·∫øt v√≠ ƒëi·ªán t·ª≠',
            message: 'B·∫°n c·∫ßn li√™n k·∫øt v√≠ ƒëi·ªán t·ª≠ ƒë·ªÉ c√≥ th·ªÉ ƒë·∫∑t h√†ng. Vui l√≤ng li√™n k·∫øt v√≠ trong trang c√° nh√¢n.',
            actions: [
                {
                    label: 'Li√™n k·∫øt v√≠ ngay',
                    type: 'primary',
                    onClick: () => {
                        setShowModal(false);
                        navigate('/profile');
                    }
                },
                {
                    label: 'Quay l·∫°i',
                    type: 'secondary',
                    onClick: () => {
                        setShowModal(false);
                        navigate(-1);
                    }
                }
            ]
        });
        setShowModal(true);
    };

    // Hi·ªÉn th·ªã modal s·∫£n ph·∫©m h·∫øt h√†ng
    const showProductUnavailableModal = () => {
        setModalConfig({
            type: 'error',
            title: 'S·∫£n ph·∫©m kh√¥ng c√≤n h√†ng',
            message: 'R·∫•t ti·∫øc, s·∫£n ph·∫©m n√†y ƒë√£ ƒë∆∞·ª£c b√°n ho·∫∑c kh√¥ng c√≤n h√†ng. Vui l√≤ng ch·ªçn s·∫£n ph·∫©m kh√°c.',
            actions: [
                {
                    label: 'Xem s·∫£n ph·∫©m t∆∞∆°ng t·ª±',
                    type: 'primary',
                    onClick: () => {
                        setShowModal(false);
                        navigate('/products');
                    }
                },
                {
                    label: 'V·ªÅ trang ch·ªß',
                    type: 'secondary',
                    onClick: () => {
                        setShowModal(false);
                        navigate('/');
                    }
                }
            ]
        });
        setShowModal(true);
    };

    // Hi·ªÉn th·ªã modal nhi·ªÅu ng∆∞·ªùi b√°n
    const showMultipleSellersModal = () => {
        setModalConfig({
            type: 'warning',
            title: 'Kh√¥ng th·ªÉ ƒë·∫∑t h√†ng',
            message: 'M·ªói ƒë∆°n h√†ng ch·ªâ ƒë∆∞·ª£c ch·ª©a s·∫£n ph·∫©m t·ª´ m·ªôt ng∆∞·ªùi b√°n. Vui l√≤ng t√°ch ƒë∆°n th√†nh nhi·ªÅu ƒë∆°n h√†ng ri√™ng.',
            actions: [
                {
                    label: 'Xem gi·ªè h√†ng',
                    type: 'primary',
                    onClick: () => {
                        setShowModal(false);
                        navigate('/cart');
                    }
                },
                {
                    label: 'Quay l·∫°i',
                    type: 'secondary',
                    onClick: () => {
                        setShowModal(false);
                        navigate(-1);
                    }
                }
            ]
        });
        setShowModal(true);
    };

    // X·ª≠ l√Ω thay ƒë·ªïi input
    const handleInputChange = (field, value) => {
        setOrderData(prev => ({
            ...prev,
            [field]: value
        }));
    };

    // T√≠nh ph√≠ ship
    const calculateShippingFee = (address) => {
        if (!address) return 0;

        if (address.includes('TP.HCM') || address.includes('H√† N·ªôi')) {
            return 50000;
        } else if (address.includes('ƒê√† N·∫µng') || address.includes('C·∫ßn Th∆°') || address.includes('H·∫£i Ph√≤ng')) {
            return 100000;
        } else {
            return 150000;
        }
    };

    // X·ª≠ l√Ω thay ƒë·ªïi ƒë·ªãa ch·ªâ
    const handleDeliveryAddressChange = (value) => {
        const shippingFee = calculateShippingFee(value);
        setOrderData(prev => ({
            ...prev,
            shipping_address: value,
            shipping_fee: shippingFee,
            final_price: prev.total_price + shippingFee
        }));
    };

    // Ki·ªÉm tra form h·ª£p l·ªá
    const isFormValid = () => {
        const basicValidation = orderData.buyer_name.trim() &&
            orderData.phone_number.trim() &&
            orderData.buyer_email.trim() &&
            orderData.shipping_address.trim() &&
            orderData.delivery_phone.trim();

        // N·∫øu c·∫ßn xu·∫•t h√≥a ƒë∆°n ƒë∆°n h√†ng, kh√¥ng c·∫ßn validation th√™m
        // Ch·ªâ c·∫ßn th√¥ng tin c∆° b·∫£n c·ªßa ng∆∞·ªùi mua
        return basicValidation;
    };

    // X·ª≠ l√Ω ƒë·∫∑t h√†ng
    const handlePlaceOrder = async () => {
        if (!isFormValid()) {
            alert('Vui l√≤ng ƒëi·ªÅn ƒë·∫ßy ƒë·ªß th√¥ng tin b·∫Øt bu·ªôc');
            return;
        }

        setIsSubmitting(true);

        try {
            await new Promise(resolve => setTimeout(resolve, 2000));

            const newOrderId = 'ORD' + Date.now();
            setOrderId(newOrderId);

            // C·∫≠p nh·∫≠t orderData v·ªõi th√¥ng tin ƒë·∫ßy ƒë·ªß
            const completeOrderData = {
                ...orderData,
                order_id: newOrderId,
                order_code: orderData.order_code || generateOrderCode(),
                status: 'pending', // M·∫∑c ƒë·ªãnh l√† pending khi buyer ƒë·∫∑t h√†ng
                created_at: new Date().toISOString(),
                updated_at: new Date().toISOString(),
                buyer_id: localStorage.getItem('userId') || null,
                admin_id: null, // S·∫Ω ƒë∆∞·ª£c set b·ªüi admin khi x·ª≠ l√Ω
                shipping_partner_id: null, // S·∫Ω ƒë∆∞·ª£c set b·ªüi admin khi ch·ªçn ƒë·ªëi t√°c v·∫≠n chuy·ªÉn
                estimated_delivery: new Date(Date.now() + 3 * 24 * 60 * 60 * 1000).toISOString(),
                cancel_at: null, // Ch·ªâ set khi admin h·ªßy ƒë∆°n h√†ng
                cancel_reason: '' // Ch·ªâ set khi admin h·ªßy ƒë∆°n h√†ng
            };

            const order = {
                ...completeOrderData,
                product: product
            };

            const existingOrders = JSON.parse(localStorage.getItem('orders') || '[]');
            existingOrders.push(order);
            localStorage.setItem('orders', JSON.stringify(existingOrders));

            // T·∫°o th√¥ng b√°o cho seller
            createSellerNotification(order);

            setCurrentStep(3);
        } catch (error) {
            alert('C√≥ l·ªói x·∫£y ra khi ƒë·∫∑t h√†ng. Vui l√≤ng th·ª≠ l·∫°i.');
        } finally {
            setIsSubmitting(false);
        }
    };

    // Navigation handlers
    const handleGoBack = () => {
        if (currentStep > 1) {
            setCurrentStep(currentStep - 1);
        } else {
            navigate(-1);
        }
    };

    const handleGoHome = () => {
        navigate('/');
    };

    const handleViewOrder = () => {
        navigate(`/order-tracking/${orderId}`);
    };

    // T·∫°o th√¥ng b√°o cho seller
    const createSellerNotification = (order) => {
        const notification = {
            id: Date.now().toString(),
            type: 'new_order',
            title: 'ƒê∆°n h√†ng m·ªõi',
            message: `B·∫°n c√≥ ƒë∆°n h√†ng m·ªõi t·ª´ ${order.buyerName}`,
            timestamp: new Date().toISOString(),
            read: false,
            orderId: order.id,
            orderDetails: {
                id: order.id,
                customerName: order.buyerName,
                customerPhone: order.buyerPhone,
                deliveryAddress: order.deliveryAddress,
                product: product.title,
                totalAmount: order.finalPrice
            }
        };

        // L∆∞u th√¥ng b√°o v√†o localStorage
        const existingNotifications = JSON.parse(localStorage.getItem('sellerNotifications') || '[]');
        existingNotifications.unshift(notification); // Th√™m v√†o ƒë·∫ßu danh s√°ch
        localStorage.setItem('sellerNotifications', JSON.stringify(existingNotifications));

        console.log('üîî ƒê√£ t·∫°o th√¥ng b√°o cho seller:', notification);
    };

    if (isGuest) {
        return null;
    }

    if (!product) {
        return (
            <div className="place-order-loading">
                <div className="loading-spinner"></div>
                <p>ƒêang t·∫£i th√¥ng tin s·∫£n ph·∫©m...</p>
            </div>
        );
    }

    // Hi·ªÉn th·ªã m√†n h√¨nh ki·ªÉm tra
    if (validationStep === 'checking') {
        return (
            <div className="place-order-page">
                <div className="validation-screen">
                    <div className="validation-content">
                        <div className="loading-spinner"></div>
                        <h3>ƒêang ki·ªÉm tra th√¥ng tin</h3>
                        <p>Vui l√≤ng ƒë·ª£i trong gi√¢y l√°t...</p>
                        <div className="validation-steps">
                            <div className="validation-step active">
                                <Wallet className="step-icon" />
                                <span>Ki·ªÉm tra v√≠ ƒëi·ªán t·ª≠</span>
                            </div>
                            <div className="validation-step">
                                <Package className="step-icon" />
                                <span>Ki·ªÉm tra s·∫£n ph·∫©m</span>
                            </div>
                            <div className="validation-step">
                                <ShoppingCart className="step-icon" />
                                <span>Ki·ªÉm tra ƒë∆°n h√†ng</span>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        );
    }

    // Hi·ªÉn th·ªã modal n·∫øu c√≥ l·ªói
    if (showModal && validationStep !== 'payment') {
        return (
            <div className="place-order-page">
                <div className="modal-overlay" onClick={() => setShowModal(false)}>
                    <div className="validation-modal" onClick={(e) => e.stopPropagation()}>
                        <div className={`modal-icon ${modalConfig.type}`}>
                            {modalConfig.type === 'warning' && <AlertCircle size={48} />}
                            {modalConfig.type === 'error' && <XCircle size={48} />}
                            {modalConfig.type === 'success' && <CheckCircle size={48} />}
                        </div>
                        <h3 className="modal-title">{modalConfig.title}</h3>
                        <p className="modal-message">{modalConfig.message}</p>
                        <div className="modal-actions">
                            {modalConfig.actions.map((action, index) => (
                                <button
                                    key={index}
                                    className={`btn btn-${action.type}`}
                                    onClick={action.onClick}
                                >
                                    {action.label}
                                </button>
                            ))}
                        </div>
                    </div>
                </div>
            </div>
        );
    }

    return (
        <div className="place-order-page">
            <TestEnvironmentSetup />
            <div className="place-order-container">
                {/* Header */}
                <div className="place-order-header">
                    <div className="breadcrumb-nav">
                        <button className="breadcrumb-btn" onClick={handleGoHome}>
                            <Home size={16} />
                            <span>Trang ch·ªß</span>
                        </button>
                        <span className="breadcrumb-separator">/</span>
                        <button className="breadcrumb-btn" onClick={handleGoBack}>
                            <ArrowLeft size={16} />
                            <span>Quay l·∫°i</span>
                        </button>
                        <span className="breadcrumb-separator">/</span>
                        <span className="breadcrumb-current">ƒê·∫∑t h√†ng</span>
                    </div>

                    <h1 className="page-title">ƒê·∫∑t h√†ng</h1>

                    {/* Debug Button */}
                    <button
                        className="debug-toggle-btn"
                        onClick={() => setShowDebugPanel(true)}
                        title="M·ªü Debug Panel"
                    >
                        <Settings size={16} />
                        Debug
                    </button>

                    {/* Progress Steps */}
                    <div className="progress-steps">
                        <div className={`step ${currentStep >= 1 ? 'active' : ''}`}>
                            <div className="step-number">1</div>
                            <div className="step-label">Th√¥ng tin</div>
                        </div>
                        <div className={`step ${currentStep >= 2 ? 'active' : ''}`}>
                            <div className="step-number">2</div>
                            <div className="step-label">X√°c nh·∫≠n</div>
                        </div>
                        <div className={`step ${currentStep >= 3 ? 'active' : ''}`}>
                            <div className="step-number">3</div>
                            <div className="step-label">Ho√†n th√†nh</div>
                        </div>
                    </div>
                </div>

                <div className="place-order-content">
                    {/* C·ªôt tr√°i - Form */}
                    <div className="order-form-column">
                        {currentStep === 1 && (
                            <div className="order-form">
                                {/* Th√¥ng tin ng∆∞·ªùi mua */}
                                <div className="form-section">
                                    <h3 className="section-title">
                                        <User className="section-icon" />
                                        Th√¥ng tin ng∆∞·ªùi mua
                                    </h3>
                                    <div className="form-group">
                                        <label className="form-label">H·ªç v√† t√™n *</label>
                                        <input
                                            type="text"
                                            className="form-input"
                                            value={orderData.buyer_name}
                                            onChange={(e) => handleInputChange('buyer_name', e.target.value)}
                                            placeholder="Nh·∫≠p h·ªç v√† t√™n"
                                        />
                                    </div>
                                    <div className="form-group">
                                        <label className="form-label">S·ªë ƒëi·ªán tho·∫°i *</label>
                                        <input
                                            type="tel"
                                            className="form-input"
                                            value={orderData.phone_number}
                                            onChange={(e) => handleInputChange('phone_number', e.target.value)}
                                            placeholder="Nh·∫≠p s·ªë ƒëi·ªán tho·∫°i"
                                        />
                                    </div>
                                    <div className="form-group">
                                        <label className="form-label">Email *</label>
                                        <input
                                            type="email"
                                            className="form-input"
                                            value={orderData.buyer_email}
                                            onChange={(e) => handleInputChange('buyer_email', e.target.value)}
                                            placeholder="Nh·∫≠p email"
                                        />
                                    </div>
                                </div>

                                {/* Th√¥ng tin ƒë∆°n h√†ng */}
                                <div className="form-section">
                                    <h3 className="section-title">
                                        <Settings className="section-icon" />
                                        Th√¥ng tin ƒë∆°n h√†ng
                                    </h3>
                                    <div className="form-group">
                                        <label className="form-label">M√£ ƒë∆°n h√†ng</label>
                                        <input
                                            type="text"
                                            className="form-input"
                                            value={orderData.order_code}
                                            readOnly
                                            style={{ backgroundColor: '#f8f9fa', color: '#6c757d' }}
                                        />
                                        <small className="form-help">M√£ ƒë∆°n h√†ng ƒë∆∞·ª£c t·∫°o t·ª± ƒë·ªông</small>
                                    </div>
                                    <div className="form-group">
                                        <label className="form-label">Tr·∫°ng th√°i ƒë∆°n h√†ng</label>
                                        <input
                                            type="text"
                                            className="form-input"
                                            value="Ch·ªù x·ª≠ l√Ω"
                                            readOnly
                                            style={{ backgroundColor: '#f8f9fa', color: '#6c757d' }}
                                        />
                                        <small className="form-help">Tr·∫°ng th√°i s·∫Ω ƒë∆∞·ª£c c·∫≠p nh·∫≠t b·ªüi h·ªá th·ªëng</small>
                                    </div>
                                    <div className="form-group">
                                        <label className="form-label">ƒê·ªëi t√°c v·∫≠n chuy·ªÉn</label>
                                        <input
                                            type="text"
                                            className="form-input"
                                            value="S·∫Ω ƒë∆∞·ª£c ch·ªçn sau khi x√°c nh·∫≠n ƒë∆°n h√†ng"
                                            readOnly
                                            style={{ backgroundColor: '#f8f9fa', color: '#6c757d' }}
                                        />
                                        <small className="form-help">ƒê·ªëi t√°c v·∫≠n chuy·ªÉn s·∫Ω ƒë∆∞·ª£c ch·ªçn b·ªüi admin</small>
                                    </div>
                                </div>

                                {/* Th√¥ng tin giao h√†ng */}
                                <div className="form-section">
                                    <h3 className="section-title">
                                        <MapPin className="section-icon" />
                                        Th√¥ng tin giao h√†ng
                                    </h3>
                                    <div className="form-group">
                                        <label className="form-label">ƒê·ªãa ch·ªâ giao h√†ng *</label>
                                        <textarea
                                            className="form-textarea"
                                            value={orderData.shipping_address}
                                            onChange={(e) => handleDeliveryAddressChange(e.target.value)}
                                            placeholder="Nh·∫≠p ƒë·ªãa ch·ªâ giao h√†ng chi ti·∫øt"
                                            rows={3}
                                        />
                                    </div>
                                    <div className="form-group">
                                        <label className="form-label">S·ªë ƒëi·ªán tho·∫°i nh·∫≠n h√†ng *</label>
                                        <input
                                            type="tel"
                                            className="form-input"
                                            value={orderData.delivery_phone}
                                            onChange={(e) => handleInputChange('delivery_phone', e.target.value)}
                                            placeholder="Nh·∫≠p s·ªë ƒëi·ªán tho·∫°i nh·∫≠n h√†ng"
                                        />
                                    </div>
                                    <div className="form-group">
                                        <label className="form-label">Ghi ch√∫ giao h√†ng</label>
                                        <textarea
                                            className="form-textarea"
                                            value={orderData.delivery_note}
                                            onChange={(e) => handleInputChange('delivery_note', e.target.value)}
                                            placeholder="Ghi ch√∫ th√™m cho ng∆∞·ªùi giao h√†ng"
                                            rows={2}
                                        />
                                    </div>
                                </div>

                                {/* Ph∆∞∆°ng th·ª©c thanh to√°n */}
                                <div className="form-section">
                                    <h3 className="section-title">
                                        <CreditCard className="section-icon" />
                                        Ph∆∞∆°ng th·ª©c thanh to√°n
                                    </h3>
                                    <div className="payment-methods">
                                        <label className="payment-option">
                                            <input
                                                type="radio"
                                                name="paymentMethod"
                                                value="wallet"
                                                checked={orderData.payment_method === 'wallet'}
                                                onChange={(e) => handleInputChange('payment_method', e.target.value)}
                                            />
                                            <div className="payment-info">
                                                <div className="payment-name">
                                                    <Wallet size={20} />
                                                    V√≠ ƒëi·ªán t·ª≠
                                                </div>
                                                <div className="payment-desc">Thanh to√°n qua v√≠ ƒëi·ªán t·ª≠ ƒë√£ li√™n k·∫øt</div>
                                            </div>
                                        </label>
                                        <label className="payment-option">
                                            <input
                                                type="radio"
                                                name="paymentMethod"
                                                value="cod"
                                                checked={orderData.payment_method === 'cod'}
                                                onChange={(e) => handleInputChange('payment_method', e.target.value)}
                                            />
                                            <div className="payment-info">
                                                <div className="payment-name">
                                                    <Package size={20} />
                                                    Thanh to√°n khi nh·∫≠n h√†ng (COD)
                                                </div>
                                                <div className="payment-desc">Thanh to√°n b·∫±ng ti·ªÅn m·∫∑t khi nh·∫≠n h√†ng</div>
                                            </div>
                                        </label>
                                    </div>
                                </div>

                                {/* Xu·∫•t h√≥a ƒë∆°n ƒë∆°n h√†ng */}
                                <div className="form-section">
                                    <h3 className="section-title">
                                        <Package className="section-icon" />
                                        Xu·∫•t h√≥a ƒë∆°n ƒë∆°n h√†ng
                                    </h3>

                                    <div className="invoice-question">
                                        <div className="invoice-question-text">
                                            Qu√Ω kh√°ch c√≥ mu·ªën xu·∫•t h√≥a ƒë∆°n cho ƒë∆°n h√†ng n√†y kh√¥ng?
                                        </div>
                                        <div className="invoice-options">
                                            <label className="invoice-option">
                                                <input
                                                    type="radio"
                                                    name="needOrderInvoice"
                                                    value="true"
                                                    checked={orderData.need_order_invoice === true}
                                                    onChange={(e) => handleInputChange('need_order_invoice', e.target.value === 'true')}
                                                />
                                                <span className="invoice-option-label">C√≥</span>
                                            </label>
                                            <label className="invoice-option">
                                                <input
                                                    type="radio"
                                                    name="needOrderInvoice"
                                                    value="false"
                                                    checked={orderData.need_order_invoice === false}
                                                    onChange={(e) => handleInputChange('need_order_invoice', e.target.value === 'true')}
                                                />
                                                <span className="invoice-option-label">Kh√¥ng</span>
                                            </label>
                                        </div>
                                    </div>

                                    {/* )} */}
                                </div>

                                <div className="form-actions">
                                    <button
                                        className="btn btn-primary"
                                        onClick={() => setCurrentStep(2)}
                                        disabled={!isFormValid()}
                                    >
                                        Ti·∫øp t·ª•c
                                    </button>
                                </div>
                            </div>
                        )}

                        {currentStep === 2 && (
                            <div className="order-confirmation">
                                <h3 className="section-title">X√°c nh·∫≠n ƒë∆°n h√†ng</h3>

                                <div className="confirmation-section">
                                    <h4>Th√¥ng tin ng∆∞·ªùi mua</h4>
                                    <div className="info-item">
                                        <span className="info-label">H·ªç t√™n:</span>
                                        <span className="info-value">{orderData.buyer_name}</span>
                                    </div>
                                    <div className="info-item">
                                        <span className="info-label">S·ªë ƒëi·ªán tho·∫°i:</span>
                                        <span className="info-value">{orderData.phone_number}</span>
                                    </div>
                                    <div className="info-item">
                                        <span className="info-label">Email:</span>
                                        <span className="info-value">{orderData.buyer_email}</span>
                                    </div>
                                </div>

                                <div className="confirmation-section">
                                    <h4>Th√¥ng tin giao h√†ng</h4>
                                    <div className="info-item">
                                        <span className="info-label">ƒê·ªãa ch·ªâ:</span>
                                        <span className="info-value">{orderData.shipping_address}</span>
                                    </div>
                                    <div className="info-item">
                                        <span className="info-label">S·ªë ƒëi·ªán tho·∫°i:</span>
                                        <span className="info-value">{orderData.delivery_phone}</span>
                                    </div>
                                    {orderData.delivery_note && (
                                        <div className="info-item">
                                            <span className="info-label">Ghi ch√∫:</span>
                                            <span className="info-value">{orderData.delivery_note}</span>
                                        </div>
                                    )}
                                </div>

                                <div className="confirmation-section">
                                    <h4>Th√¥ng tin ƒë∆°n h√†ng</h4>
                                    <div className="info-item">
                                        <span className="info-label">M√£ ƒë∆°n h√†ng:</span>
                                        <span className="info-value">{orderData.order_code}</span>
                                    </div>
                                    <div className="info-item">
                                        <span className="info-label">Tr·∫°ng th√°i:</span>
                                        <span className="info-value">Ch·ªù x·ª≠ l√Ω</span>
                                    </div>
                                    <div className="info-item">
                                        <span className="info-label">ƒê·ªëi t√°c v·∫≠n chuy·ªÉn:</span>
                                        <span className="info-value">S·∫Ω ƒë∆∞·ª£c ch·ªçn sau khi x√°c nh·∫≠n</span>
                                    </div>
                                </div>

                                <div className="confirmation-section">
                                    <h4>Ph∆∞∆°ng th·ª©c thanh to√°n</h4>
                                    <div className="info-item">
                                        <span className="info-label">Ph∆∞∆°ng th·ª©c:</span>
                                        <span className="info-value">
                                            {orderData.payment_method === 'wallet' ? 'V√≠ ƒëi·ªán t·ª≠' : 'Thanh to√°n khi nh·∫≠n h√†ng'}
                                        </span>
                                    </div>
                                </div>

                                <div className="confirmation-section">
                                    <h4>Xu·∫•t h√≥a ƒë∆°n ƒë∆°n h√†ng</h4>
                                    <div className="info-item">
                                        <span className="info-label">Xu·∫•t h√≥a ƒë∆°n:</span>
                                        <span className="info-value">
                                            {orderData.need_order_invoice ? 'C√≥' : 'Kh√¥ng'}
                                        </span>
                                    </div>
                                </div>

                                <div className="form-actions">
                                    <button
                                        className="btn btn-secondary"
                                        onClick={() => setCurrentStep(1)}
                                    >
                                        Quay l·∫°i
                                    </button>
                                    <button
                                        className="btn btn-primary"
                                        onClick={handlePlaceOrder}
                                        disabled={isSubmitting}
                                    >
                                        {isSubmitting ? 'ƒêang x·ª≠ l√Ω...' : 'ƒê·∫∑t h√†ng'}
                                    </button>
                                </div>
                            </div>
                        )}

                        {currentStep === 3 && (
                            <div className="order-success">
                                <div className="success-icon">
                                    <CheckCircle size={64} color="#28a745" />
                                </div>
                                <h3 className="success-title">ƒê·∫∑t h√†ng th√†nh c√¥ng!</h3>
                                <p className="success-message">
                                    C·∫£m ∆°n b·∫°n ƒë√£ ƒë·∫∑t h√†ng. Ch√∫ng t√¥i s·∫Ω li√™n h·ªá v·ªõi b·∫°n trong th·ªùi gian s·ªõm nh·∫•t.
                                </p>

                                <div className="order-info">
                                    <div className="info-item">
                                        <span className="info-label">M√£ ƒë∆°n h√†ng:</span>
                                        <span className="info-value">{orderId}</span>
                                    </div>
                                    <div className="info-item">
                                        <span className="info-label">D·ª± ki·∫øn giao h√†ng:</span>
                                        <span className="info-value">
                                            {new Date(Date.now() + 3 * 24 * 60 * 60 * 1000).toLocaleDateString('vi-VN')}
                                        </span>
                                    </div>
                                </div>

                                <div className="success-actions">
                                    <button
                                        className="btn btn-secondary"
                                        onClick={handleGoHome}
                                    >
                                        V·ªÅ trang ch·ªß
                                    </button>
                                    <button
                                        className="btn btn-primary"
                                        onClick={handleViewOrder}
                                    >
                                        Theo d√µi ƒë∆°n h√†ng
                                    </button>
                                </div>
                            </div>
                        )}
                    </div>

                    {/* C·ªôt ph·∫£i - Th√¥ng tin s·∫£n ph·∫©m */}
                    <div className="order-summary-column">
                        <div className="space-y-6">
                            <div className="card sticky top-4">
                                <div className="card-header">
                                    <h3 className="card-title">T√≥m t·∫Øt ƒë∆°n h√†ng</h3>
                                </div>
                                <div className="card-content space-y-4">
                                    <div className="rounded-lg bg-muted p-3 space-y-1">
                                        <div className="flex items-center justify-between text-sm">
                                            <span className="text-muted-foreground">M√£ ƒë∆°n h√†ng:</span>
                                            <span className="font-mono text-xs text-foreground">{orderData.order_code}</span>
                                        </div>
                                        <div className="flex items-center justify-between text-sm">
                                            <span className="text-muted-foreground">Tr·∫°ng th√°i:</span>
                                            <span className="badge badge-secondary text-xs">
                                                Ch·ªù x√°c nh·∫≠n
                                            </span>
                                        </div>
                                        <div className="flex items-center justify-between text-sm">
                                            <span className="text-muted-foreground">Ng√†y t·∫°o:</span>
                                            <span className="text-xs text-foreground">{new Date().toLocaleDateString("vi-VN")}</span>
                                        </div>
                                    </div>

                                    <div className="separator"></div>

                                    <div className="aspect-video overflow-hidden rounded-lg bg-muted">
                                        <img src={product.image} alt={product.title} className="h-full w-full object-cover" />
                                    </div>

                                    <div className="space-y-3">
                                        <div>
                                            <h3 className="font-semibold text-card-foreground">{product.title}</h3>
                                            <p className="text-sm text-muted-foreground">{product.brand} ‚Ä¢ {product.model}</p>
                                            <p className="text-xs text-muted-foreground font-mono mt-1">ID: PROD-{product.id}</p>
                                        </div>

                                        <div className="flex items-center gap-2">
                                            <span className="badge badge-accent">
                                                ƒê√£ ki·ªÉm ƒë·ªãnh
                                            </span>
                                            <span className="badge badge-outline">{product.conditionLevel}</span>
                                        </div>
                                    </div>

                                    <div className="separator"></div>

                                    <div className="space-y-3">
                                        <div className="flex items-center justify-between text-sm">
                                            <span className="text-muted-foreground">Gi√° s·∫£n ph·∫©m</span>
                                            <span className="font-medium text-foreground">{formatCurrency(orderData.total_price)}</span>
                                        </div>

                                        <div className="flex items-center justify-between text-sm">
                                            <span className="text-muted-foreground">Ph√≠ ki·ªÉm ƒë·ªãnh</span>
                                            <span className="font-medium text-foreground">500.000‚Ç´</span>
                                        </div>

                                        <div className="flex items-center justify-between text-sm">
                                            <span className="text-muted-foreground">Ph√≠ v·∫≠n chuy·ªÉn</span>
                                            <span className="font-medium text-foreground">{formatCurrency(orderData.shipping_fee)}</span>
                                        </div>

                                        <div className="separator"></div>

                                        <div className="flex items-center justify-between">
                                            <span className="font-semibold text-foreground">T·ªïng c·ªông</span>
                                            <span className="text-2xl font-bold text-foreground">{formatCurrency(orderData.final_price)}</span>
                                        </div>
                                    </div>

                                    <div className="rounded-lg bg-accent/20 p-4">
                                        <div className="mb-2 flex items-center gap-2">
                                            <svg className="h-5 w-5 text-accent" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                                <path
                                                    strokeLinecap="round"
                                                    strokeLinejoin="round"
                                                    strokeWidth={2}
                                                    d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z"
                                                />
                                            </svg>
                                            <span className="font-semibold text-foreground">Cam k·∫øt ch·∫•t l∆∞·ª£ng</span>
                                        </div>
                                        <ul className="space-y-1 text-sm text-muted-foreground">
                                            <li>‚úì Ki·ªÉm ƒë·ªãnh k·ªπ thu·∫≠t 100%</li>
                                            <li>‚úì B·∫£o h√†nh 6 th√°ng</li>
                                            <li>‚úì ƒê·ªïi tr·∫£ trong 7 ng√†y</li>
                                            <li>‚úì H·ªó tr·ª£ tr·∫£ g√≥p 0%</li>
                                        </ul>
                                    </div>
                                </div>
                            </div>

                            <div className="card">
                                <div className="card-header">
                                    <h3 className="card-title text-base">C·∫ßn h·ªó tr·ª£?</h3>
                                </div>
                                <div className="card-content space-y-3">
                                    <div className="flex items-start gap-3">
                                        <svg className="mt-0.5 h-5 w-5 text-muted-foreground" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                            <path
                                                strokeLinecap="round"
                                                strokeLinejoin="round"
                                                strokeWidth={2}
                                                d="M3 5a2 2 0 012-2h3.28a1 1 0 01.948.684l1.498 4.493a1 1 0 01-.502 1.21l-2.257 1.13a11.042 11.042 0 005.516 5.516l1.13-2.257a1 1 0 011.21-.502l4.493 1.498a1 1 0 01.684.949V19a2 2 0 01-2 2h-1C9.716 21 3 14.284 3 6V5z"
                                            />
                                        </svg>
                                        <div>
                                            <p className="text-sm font-medium text-foreground">Hotline: 1900 xxxx</p>
                                            <p className="text-xs text-muted-foreground">H·ªó tr·ª£ 24/7</p>
                                        </div>
                                    </div>

                                    <div className="flex items-start gap-3">
                                        <svg className="mt-0.5 h-5 w-5 text-muted-foreground" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                            <path
                                                strokeLinecap="round"
                                                strokeLinejoin="round"
                                                strokeWidth={2}
                                                d="M3 8l7.89 5.26a2 2 0 002.22 0L21 8M5 19h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v10a2 2 0 002 2z"
                                            />
                                        </svg>
                                        <div>
                                            <p className="text-sm font-medium text-foreground">support@evmarket.vn</p>
                                            <p className="text-xs text-muted-foreground">Ph·∫£n h·ªìi trong 2h</p>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            {/* Debug Panel */}
            <DebugPanel
                isOpen={showDebugPanel}
                onClose={() => setShowDebugPanel(false)}
            />
        </div>
    );
}

export default PlaceOrder;

//Hello
