// src/components/PersonalProfileForm/PersonalProfileForm.js
import { useState, useEffect } from "react";
import profileApi from "../../api/profileApi";
import "./PersonalProfileForm.css";

// (H√†m formatDateToDDMMYYYY... gi·ªØ nguy√™n)
const formatDateToDDMMYYYY = (dateString) => {
  if (!dateString || !dateString.includes("-")) return dateString; // Guard
  const [year, month, day] = dateString.split("-");
  return `${day}-${month}-${year}`;
};

// (H√†m validateField... gi·ªØ nguy√™n)
const validateField = (name, value) => {
  const nameRegex = /^[\p{L}\s]+$/u;
  const emailRegex = /^[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Za-z]{2,6}$/;
  const phoneRegex = /^0\d{9}$/;
  const addressRegex = /^[\p{L}0-9\s,./-]+$/u;

  switch (name) {
    case "fullName":
      if (!value?.trim()) return "Vui l√≤ng nh·∫≠p h·ªç v√† t√™n."; // Th√™m ?. an to√†n
      if (!nameRegex.test(value)) return "H·ªç t√™n ch·ªâ ƒë∆∞·ª£c ch·ª©a ch·ªØ c√°i v√† kho·∫£ng tr·∫Øng.";
      break;
    case "phoneNumber":
      if (!value?.trim()) return "Vui l√≤ng nh·∫≠p s·ªë ƒëi·ªán tho·∫°i.";
      if (!phoneRegex.test(value)) return "SƒêT ph·∫£i b·∫Øt ƒë·∫ßu b·∫±ng 0 v√† ƒë·ªß 10 s·ªë.";
      break;
    case "email":
      if (!value?.trim()) return "Email l√† b·∫Øt bu·ªôc.";
      if (!emailRegex.test(value)) return "ƒê·ªãnh d·∫°ng email kh√¥ng h·ª£p l·ªá.";
      break;
    case "defaultShippingAddress":
      if (!value?.trim()) return "Vui l√≤ng nh·∫≠p ƒë·ªãa ch·ªâ giao h√†ng.";
      if (!addressRegex.test(value)) return "ƒê·ªãa ch·ªâ ch·ª©a k√Ω t·ª± kh√¥ng h·ª£p l·ªá.";
      break;
    case "dob":
      if (!value?.trim()) return "Vui l√≤ng ch·ªçn ng√†y sinh.";
      break;
    default:
      break;
  }
  return null; // Kh√¥ng c√≥ l·ªói
};


export default function PersonalProfileForm() {
  const [formData, setFormData] = useState({
    fullName: "",
    phoneNumber: "",
    email: "",
    gender: "male",
    dob: "",
    defaultShippingAddress: "",
  });

  // üîπ STATE M·ªöI: D√πng ƒë·ªÉ l∆∞u b·∫£n g·ªëc khi b·∫•m "Cancel"
  const [pristineData, setPristineData] = useState(null);

  const [existingAvatarUrl, setExistingAvatarUrl] = useState(null);
  const [newAvatarFile, setNewAvatarFile] = useState(null);
  const [errors, setErrors] = useState({});
  const [isLoading, setIsLoading] = useState(false);
  const [isViewMode, setIsViewMode] = useState(false); // Kh·ªüi t·∫°o l√† false
  const [isNewUser, setIsNewUser] = useState(true);

  // üîπ 1. ƒê·ªçc email t·ª´ storage M·ªòT L·∫¶N khi component render (ƒë·ªÉ d√πng l√†m dependency)
  const storedEmail = localStorage.getItem("userEmail");

  // üîπ 2. S·ª≠a l·∫°i HO√ÄN TO√ÄN useEffect (FIX L·ªñI USER M·ªöI)
  useEffect(() => {
    
    // ƒê·ªçc email "m·ªõi nh·∫•t" ngay khi effect ch·∫°y
    const currentEmail = localStorage.getItem("userEmail");

    const fetchProfile = async () => {
      // B·∫Øt ƒë·∫ßu th√¨ reset l·ªói c≈© (n·∫øu c√≥)
      setErrors({});
      try {
        const response = await profileApi.getProfile();

        // üîπ S·ª¨A L·∫†I C√ÅCH B√ìC T√ÅCH DATA üîπ
        const responseBody = response.data; // ƒê√¢y l√† { success: true, data: {...}, ... }

        // Ki·ªÉm tra xem API c√≥ success kh√¥ng
        if (!responseBody.success) {
          throw new Error(responseBody.message || "L·ªói khi t·∫£i profile.");
        }

        // L·∫•y data profile th·∫≠t (l·ªõp b√™n trong)
        const profileData = responseBody.data;

        // Ki·ªÉm tra "th√¥ng minh" (coi fullName r·ªóng l√† ch∆∞a c√≥ profile)
        if (!profileData || !profileData.fullName || profileData.fullName.trim() === "") { 
          throw new Error("Profile is not completed.");
        }

        // User ƒë√£ c√≥ profile (d√πng profileData)
        const mappedData = {
          fullName: profileData.fullName || "",
          phoneNumber: profileData.phoneNumber || "",
          email: profileData.email || currentEmail || "", // D√πng email m·ªõi nh·∫•t
          gender: profileData.gender?.toLowerCase() || "male",
          dob: profileData.dob || "",
          defaultShippingAddress: profileData.defaultShippingAddress || "",
          avatarUrl: profileData.avatarUrl || null // Th√™m avatarUrl
        };

        setFormData(mappedData); // Set data cho form
        setPristineData(mappedData); // Set data backup

        if (profileData.avatarUrl) {
          setExistingAvatarUrl(profileData.avatarUrl);
          // Kh√¥ng c·∫ßn set localStorage ·ªü ƒë√¢y n·ªØa, v√¨ Sidebar t·ª± ƒë·ªçc
          // localStorage.setItem("buyerAvatar", profileData.avatarUrl); 
        } else {
          setExistingAvatarUrl(null); // ƒê·∫£m b·∫£o avatar default n·∫øu API ko tr·∫£ v·ªÅ
        }

        setIsNewUser(false);
        setIsViewMode(true); // Chuy·ªÉn sang View

      } catch (error) {
        // L·ªói 404/500 ho·∫∑c profile ch∆∞a ho√†n t·∫•t
        console.error("Kh√¥ng th·ªÉ t·∫£i h·ªì s∆° (c√≥ th·ªÉ l√† user m·ªõi):", error.message);
        
        // üîπ RESET L·∫†I STATE KHI USER M·ªöI KH√îNG C√ì DATA üîπ
        setIsNewUser(true);
        setIsViewMode(false); // Hi·ªÉn th·ªã Form
        setExistingAvatarUrl(null); // üîπ Reset avatar v·ªÅ default
        setPristineData(null); // üîπ X√≥a data backup c≈©
        
        setFormData({ // üîπ Reset form v·ªÅ r·ªóng (ch·ªâ gi·ªØ l·∫°i email)
            fullName: "",
            phoneNumber: "",
            email: currentEmail || "", // D√πng email m·ªõi nh·∫•t
            gender: "male",
            dob: "",
            defaultShippingAddress: "",
        });
      }
    };

    // Ch·ªâ fetch profile n·∫øu user ƒë√£ ƒëƒÉng nh·∫≠p (c√≥ email)
    if (currentEmail) {
        fetchProfile();
    } else {
        // User ƒê√É LOGOUT, reset m·ªçi th·ª© (ph√≤ng tr∆∞·ªùng h·ª£p logout m√† component ch∆∞a unmount)
        setIsNewUser(true);
        setIsViewMode(false);
        setFormData({ email: "", fullName: "", phoneNumber: "", gender: "male", dob: "", defaultShippingAddress: "" });
        setPristineData(null);
        setExistingAvatarUrl(null);
        setNewAvatarFile(null);
        setErrors({});
    }
    
  // üîπ 3. THAY ƒê·ªîI DEPENDENCY: Ch·∫°y l·∫°i effect n√†y khi `storedEmail` thay ƒë·ªïi
  }, [storedEmail]);


  // (handleChange, handleBlur, handleAvatarChange... gi·ªØ nguy√™n)
  const handleChange = (e) => {
    const { name, value } = e.target;
    setFormData((prev) => ({ ...prev, [name]: value }));
    if (errors[name]) {
      setErrors((prev) => ({ ...prev, [name]: null }));
    }
  };

  const handleBlur = (e) => {
    const { name, value } = e.target;
    const error = validateField(name, value);
    setErrors((prev) => ({ ...prev, [name]: error, }));
  };
  
  const handleAvatarChange = (e) => {
    const file = e.target.files[0];
    if (file) {
      setNewAvatarFile(file);
      setExistingAvatarUrl(URL.createObjectURL(file)); // T·∫°o preview
      if (errors.avatarUrl) setErrors((prev) => ({ ...prev, "avatarUrl": "" }));
    } else {
      // N·∫øu user b·∫•m cancel khi ch·ªçn file
      setNewAvatarFile(null);
      // Kh√¥i ph·ª•c ·∫£nh preview v·ªÅ ·∫£nh c≈© (n·∫øu c√≥) ho·∫∑c null
      setExistingAvatarUrl(pristineData?.avatarUrl || null); 
    }
  };


  // üîπ H√ÄM M·ªöI: X·ª¨ L√ù N√öT CANCEL üîπ
  const handleCancel = () => {
    if (!pristineData) return; // Kh√¥ng c√≥ data g·ªëc th√¨ kh√¥ng l√†m g√¨
    setFormData(pristineData); // 1. Kh√¥i ph·ª•c data g·ªëc
    setErrors({}); // 2. X√≥a h·∫øt l·ªói
    setNewAvatarFile(null); // 3. H·ªßy file ·∫£nh ƒë√£ ch·ªçn
    setExistingAvatarUrl(pristineData.avatarUrl || null); // 4. Kh√¥i ph·ª•c ·∫£nh preview g·ªëc
    setIsViewMode(true); // 5. Quay v·ªÅ ch·∫ø ƒë·ªô View
  };


  // üîπ handleSubmit (ƒê√É R√öT G·ªåN - Gi·∫£ s·ª≠ backend d√πng dob/avatar_url) üîπ
  const handleSubmit = async (e) => {
    e.preventDefault();
    if (isLoading) return;

    // (Validation... gi·ªØ nguy√™n)
    const newErrors = {};
    Object.keys(formData).forEach((key) => {
      // B·ªè qua avatarUrl khi validate form data th∆∞·ªùng
      if (key !== 'avatarUrl') { 
        const error = validateField(key, formData[key]);
        if (error) { newErrors[key] = error; }
      }
    });
    // Ki·ªÉm tra avatar ri√™ng
    if (isNewUser && !newAvatarFile && !existingAvatarUrl) {
      newErrors.avatarUrl = "Vui l√≤ng ch·ªçn ·∫£nh ƒë·∫°i di·ªán.";
    } else if (!isNewUser && !newAvatarFile && !existingAvatarUrl) {
       // N·∫øu ƒëang edit m√† x√≥a ·∫£nh c≈© ƒëi (hi·∫øm khi x·∫£y ra)
       // T√πy logic b·∫°n mu·ªën: b·∫Øt bu·ªôc hay cho ph√©p null avatarUrl
    }

    if (Object.keys(newErrors).length > 0) {
      setErrors(newErrors);
      alert("Vui l√≤ng ƒëi·ªÅn ƒë·∫ßy ƒë·ªß v√† ch√≠nh x√°c c√°c th√¥ng tin.");
      return;
    }

    setIsLoading(true);
    setErrors({});

    try {
      const formBody = new FormData();
      formBody.append("fullName", formData.fullName);
      formBody.append("phoneNumber", formData.phoneNumber);
      formBody.append("defaultShippingAddress", formData.defaultShippingAddress);
      formBody.append("gender", formData.gender.toUpperCase());
      formBody.append("email", formData.email);
      formBody.append("dob", formData.dob); 

      if (newAvatarFile) {
        formBody.append("avatar_url", newAvatarFile);
      }
      
      let response;
      if (isNewUser) {
        response = await profileApi.uploadProfile(formBody);
      } else {
        response = await profileApi.updateProfile(formBody);
      }

      const responseBody = response.data;
      if (!responseBody.success) {
        throw new Error(responseBody.message || "L·ªói khi l∆∞u profile.");
      }
      const savedData = responseBody.data;

      if (!savedData) {
         throw new Error("Server tr·∫£ v·ªÅ data r·ªóng sau khi l∆∞u.");
      }
      
      alert("L∆∞u h·ªì s∆° th√†nh c√¥ng!");

      const mappedData = {
          fullName: savedData.fullName || "",
          phoneNumber: savedData.phoneNumber || "",
          email: savedData.email || "",
          gender: (savedData.gender || "male").toLowerCase(),
          dob: savedData.dob || "",
          defaultShippingAddress: savedData.defaultShippingAddress || "",
          avatarUrl: savedData.avatarUrl || null
      };

      setFormData(mappedData);
      setPristineData(mappedData); // C·∫≠p nh·∫≠t backup

      if (savedData.avatarUrl) {
        localStorage.setItem("buyerAvatar", savedData.avatarUrl); // C·∫≠p nh·∫≠t cho Sidebar
        setExistingAvatarUrl(savedData.avatarUrl);
      } else {
         // N·∫øu API update m√† kh√¥ng tr·∫£ v·ªÅ avatarUrl (v√≠ d·ª• user x√≥a avatar)
         localStorage.removeItem("buyerAvatar");
         setExistingAvatarUrl(null);
      }
      
      setNewAvatarFile(null);
      setIsNewUser(false);
      setIsViewMode(true); // Chuy·ªÉn v·ªÅ View
    } catch (error) {
      const serverMessage = error.response?.data?.message || error.message;
      alert(serverMessage || "Kh√¥ng th·ªÉ l∆∞u h·ªì s∆°.");
       // Hi·ªÉn th·ªã l·ªói validation t·ª´ server (n·∫øu c√≥)
       if (error.response?.data?.error) { // Ki·ªÉm tra c·∫•u tr√∫c l·ªói m·ªõi
            const serverErrors = error.response.data.error;
            if (typeof serverErrors === 'object') {
                 setErrors(serverErrors);
            }
       }
    } finally {
      setIsLoading(false);
    }
  };

  // --- RENDER (Ch·∫ø ƒë·ªô Xem) ---
  if (isViewMode) {
    return (
      <div className="profile-view-container">
        <h2 className="form-title">H·ªì s∆° c√° nh√¢n</h2>
        <div className="profile-view-avatar">
          <img
            src={existingAvatarUrl || "/default-avatar.png"}
            alt="User avatar"
            className="avatar-image-large"
          />
        </div>
        <div className="view-field">
          <strong>H·ªç v√† t√™n:</strong> {formData.fullName}
        </div>
        <div className="view-field">
          <strong>Email:</strong> {formData.email}
        </div>
        <div className="view-field">
          <strong>S·ªë ƒëi·ªán tho·∫°i:</strong> {formData.phoneNumber}
        </div>
        <div className="view-field">
          <strong>Gi·ªõi t√≠nh:</strong> {formData.gender === 'male' ? 'Nam' : 'N·ªØ'}
        </div>
        <div className="view-field">
          <strong>Ng√†y sinh:</strong> {formatDateToDDMMYYYY(formData.dob)}
        </div>
        <div className="view-field">
          <strong>ƒê·ªãa ch·ªâ:</strong> {formData.defaultShippingAddress}
        </div>
        <div className="form-submit">
          <button
            onClick={() => setIsViewMode(false)}
            className="submit-button"
          >
            Ch·ªânh s·ª≠a th√¥ng tin
          </button>
        </div>
      </div>
    );
  }

  // --- RENDER (Ch·∫ø ƒë·ªô S·ª≠a - Form) ---
  return (
    <div className="profile-form-container">
      <h2 className="form-title">
        {isNewUser ? "Ho√†n t·∫•t h·ªì s∆°" : "Ch·ªânh s·ª≠a h·ªì s∆°"}
      </h2>
      <form onSubmit={handleSubmit} className="profile-form">
        {/* Avatar (Gi·ªØ nguy√™n) */}
        <div className="form-field avatar-field-center">
          <label htmlFor="avatarUrl" className="form-label">
            ·∫¢nh ƒë·∫°i di·ªán*
          </label>
          {existingAvatarUrl && (
            <img
              src={existingAvatarUrl}
              alt="Avatar Preview"
              className="avatar-preview"
            />
          )}
          <div className="input-wrapper">
            <input
              id="avatarUrl"
              type="file"
              accept="image/*"
              onChange={handleAvatarChange}
              onBlur={handleBlur} // Th√™m onBlur cho avatar
              name="avatarUrl"
              className={`form-input ${errors.avatarUrl ? "input-error" : ""}`}
            />
            {errors.avatarUrl && (
              <span className="error-text">{errors.avatarUrl}</span>
            )}
          </div>
        </div>


        {/* Full name */}
        <div className="form-field">
          <label htmlFor="fullName" className="form-label">
            H·ªç v√† t√™n*
          </label>
          <div className="input-wrapper">
            <input
              id="fullName"
              name="fullName"
              type="text"
              value={formData.fullName}
              onChange={handleChange}
              onBlur={handleBlur} // üîπ TH√äM V√ÄO
              className={`form-input ${errors.fullName ? "input-error" : ""}`}
            />
            {errors.fullName && (
              <span className="error-text">{errors.fullName}</span>
            )}
          </div>
        </div>

        {/* Phone number */}
        <div className="form-field">
          <label htmlFor="phoneNumber" className="form-label">
            S·ªë ƒëi·ªán tho·∫°i*
          </label>
          <div className="input-wrapper">
            <input
              id="phoneNumber"
              name="phoneNumber"
              type="tel"
              value={formData.phoneNumber}
              onChange={handleChange}
              onBlur={handleBlur} // üîπ TH√äM V√ÄO
              className={`form-input ${errors.phoneNumber ? "input-error" : ""
                }`}
            />
            {errors.phoneNumber && (
              <span className="error-text">{errors.phoneNumber}</span>
            )}
          </div>
        </div>

        {/* üîπ Email (ƒê√É CHO S·ª¨A) üîπ */}
        <div className="form-field">
          <label htmlFor="email" className="form-label">
            Email*
          </label>
          <div className="input-wrapper">
            <input
              id="email"
              name="email"
              type="email"
              value={formData.email}
              onChange={handleChange}
              onBlur={handleBlur} // üîπ TH√äM V√ÄO
              className={`form-input ${errors.email ? "input-error" : ""}`}
            // (readOnly ƒë√£ b·ªã x√≥a)
            />
            {errors.email && (
              <span className="error-text">{errors.email}</span>
            )}
          </div>
        </div>

        {/* Gender (Radio, kh√¥ng c·∫ßn onBlur) */}
        <div className="form-field">
          <label className="form-label">Gi·ªõi t√≠nh*</label>
          <div className="radio-group">
            <label className="radio-label">
              <input
                type="radio"
                name="gender"
                value="male"
                checked={formData.gender === "male"}
                onChange={handleChange}
              />
              <span>Nam</span>
            </label>
            <label className="radio-label">
              <input
                type="radio"
                name="gender"
                value="female"
                checked={formData.gender === "female"}
                onChange={handleChange}
              />
              <span>N·ªØ</span>
            </label>
          </div>
          {/* Hi·ªÉn th·ªã l·ªói chung cho gender n·∫øu submit */}
          {errors.gender && <span className="error-text">{errors.gender}</span>}
        </div>

        {/* ... address ... */}
        <div className="form-field">
          <label htmlFor="dob" className="form-label">
            Ng√†y sinh*
          </label>
          <div className="input-wrapper">
            <input
              id="dob"
              name="dob"
              type="date"
              value={formData.dob}
              onChange={handleChange}
              onBlur={handleBlur} // üîπ TH√äM V√ÄO
              className={`form-input ${errors.dob ? "input-error" : ""}`}
            />
            {errors.dob && <span className="error-text">{errors.dob}</span>}
          </div>
        </div>

        {/* Address */}
        <div className="form-field">
          <label htmlFor="defaultShippingAddress" className="form-label">
            ƒê·ªãa ch·ªâ*
          </label>
          <div className="input-wrapper">
            <input
              id="defaultShippingAddress"
              name="defaultShippingAddress"
              type="text"
              placeholder="7 ƒê. D1, Long Th·∫°nh M·ªπ, Th·ªß ƒê·ª©c, H·ªì Ch√≠ Minh"
              value={formData.defaultShippingAddress}
              onChange={handleChange}
              onBlur={handleBlur} // üîπ TH√äM V√ÄO
              className={`form-input ${errors.defaultShippingAddress ? "input-error" : ""
                }`}
            />
            {errors.defaultShippingAddress && (
              <span className="error-text">
                {errors.defaultShippingAddress}
              </span>
            )}
          </div>
        </div>

        {/* üîπ S·ª¨A L·∫†I KH·ªêI SUBMIT + TH√äM N√öT CANCEL üîπ */}
        <div className="form-submit">
          {/* N√∫t Cancel ch·ªâ hi·ªán khi KH√îNG PH·∫¢I user m·ªõi */}
          {!isNewUser && (
            <button
              type="button"
              onClick={handleCancel}
              className="cancel-button" // (B·∫°n c·∫ßn th√™m CSS cho class n√†y)
            >
              H·ªßy
            </button>
          )}
          
          <button
            type="submit"
            className="submit-button"
            disabled={isLoading}
          >
            {isLoading ? "ƒêang l∆∞u..." : "L∆∞u thay ƒë·ªïi"}
          </button>
        </div>
      </form>
    </div>
  );
}