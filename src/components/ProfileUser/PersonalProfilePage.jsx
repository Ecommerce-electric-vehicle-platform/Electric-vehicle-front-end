import { useState, useEffect } from "react";
import { useLocation } from "react-router-dom";
import UserSidebar from "./UserSidebar";
import PersonalProfileForm from "./PersonalProfileForm";
import "./PersonalProfilePage.css";
import ChangePassword from "./ChangePassword";
import UpgradeToSeller from "./UpgradeToSeller";
import PersonalEWallet from "./PersonalEWallet";
import SellerBuyPackage from "./SellerBuyPackage";
// test raise dispute
// ƒê√É X√ìA: import DisputeForm from "../../BuyerRaiseDispute/DisputeForm";
import SellerDocumentView from "./SellerDocumentView";
// === TH√äM IMPORT OrderList (C·∫ßn c√≥) ===
import OrderList from "../../pages/OrderList/OrderList.jsx";






export default function PersonalProfilePage() {
  const location = useLocation();
  const [activeSection, setActiveSection] = useState("H·ªì s∆° c√° nh√¢n");
  const [username, setUsername] = useState("");
  // D√πng state n√†y ƒë·ªÉ bu·ªôc component re-render khi sessionStorage thay ƒë·ªïi
  const [, forceUpdate] = useState({});




  console.log(" PersonalProfilePage render | Section:", activeSection);




  // === L·∫§Y USERNAME (ƒê√£ s·ª≠a ƒë·ªÉ ƒë·ªçc t·ª´ sessionStorage) ===
  useEffect(() => {
    const storedUsername = sessionStorage.getItem("username");
    if (storedUsername) setUsername(storedUsername);
  }, []);




  // === useEffect ch·ªâ l·∫Øng nghe event ƒë·ªÉ trigger re-render (·ªîN ƒê·ªäNH VAI TR√í) ===
  useEffect(() => {
    const handleAuthChange = () => {
      console.log("Auth status changed, forcing re-render of PersonalProfilePage.");
      forceUpdate({}); // Bu·ªôc component re-render ƒë·ªÉ ƒë·ªçc l·∫°i sessionStorage
    };




    const handleRoleChange = () => {
      console.log("Role changed event received, forcing re-render of PersonalProfilePage.");
      forceUpdate({}); // Bu·ªôc component re-render ƒë·ªÉ ƒë·ªçc l·∫°i sessionStorage
    };




    // L·∫Øng nghe s·ª± ki·ªán ƒëƒÉng nh·∫≠p/ƒëƒÉng xu·∫•t v√† thay ƒë·ªïi role
    window.addEventListener("authStatusChanged", handleAuthChange);
    window.addEventListener("roleChanged", handleRoleChange);




    // D·ªçn d·∫πp listener khi component unmount
    return () => {
      window.removeEventListener("authStatusChanged", handleAuthChange);
      window.removeEventListener("roleChanged", handleAuthChange);
    };
  }, []); // Ch·ªâ ch·∫°y 1 l·∫ßn khi mount v√† cleanup




  // === ƒê·ªåC QUERY PARAM (?tab=...) (Kh√¥ng ƒë·ªïi) ===
  useEffect(() => {
    const urlParams = new URLSearchParams(location.search);
    const tab = urlParams.get("tab");
    console.log(" URL tab =", tab);




    switch (tab) {
      case "wallet": setActiveSection("V√≠ ƒëi·ªán t·ª≠"); break;
      case "profile": setActiveSection("H·ªì s∆° c√° nh√¢n"); break;
      case "password": setActiveSection("ƒê·ªïi m·∫≠t kh·∫©u"); break;
      case "orders": setActiveSection("ƒê∆°n h√†ng c·ªßa t√¥i"); break;
      case "upgrade": setActiveSection("N√¢ng c·∫•p th√†nh ng∆∞·ªùi b√°n"); break;
      case "buy-seller-package": setActiveSection("Mua g√≥i d·ªãch v·ª•"); break;
      // Th√™m case cho tab qu·∫£n l√Ω gi·∫•y t·ªù
      case "seller-docs": setActiveSection("Qu·∫£n l√Ω gi·∫•y t·ªù kinh doanh"); break;
      // X√ìA case "dispute" (Logic x·ª≠ l√Ω Dispute gi·ªù n·∫±m trong OrderList)
      default: break; // Gi·ªØ nguy√™n n·∫øu tab kh√¥ng h·ª£p l·ªá
    }
  }, [location.search]); // Ch·∫°y l·∫°i khi URL search thay ƒë·ªïi




  // === HANDLE SIDEBAR CLICK (Kh√¥ng ƒë·ªïi) ===
  const handleSidebarClick = (section) => {
    if (section === activeSection) return;
    setActiveSection(section);
    window.scrollTo({ top: 0, behavior: "smooth" });
  };




  // === HANDLE KYC ACCEPTED (Kh√¥ng ƒë·ªïi) ===
  const handleKycAccepted = () => {
    console.log("KYC Accepted! Navigating to Buy Package tab...");
    setActiveSection("Mua g√≥i d·ªãch v·ª•");
    window.scrollTo({ top: 0, behavior: "smooth" });
    // Kh√¥ng c·∫ßn forceUpdate ·ªü ƒë√¢y v√¨ s·ª± ki·ªán "roleChanged" s·∫Ω t·ª± trigger re-render
  };




  // === ƒê·ªåC userRole tr·ª±c ti·∫øp t·ª´ sessionStorage tr∆∞·ªõc khi render ===
  const currentUserRole = sessionStorage.getItem("userRole") || "buyer"; // Nhanh v√† ·ªïn ƒë·ªãnh nh·∫•t
  console.log(`üë§ Reading userRole directly before render: '${currentUserRole}'`);




  // === JSX ===
  return (
    <div className="profile-page">
      <div className="profile-container">
        <UserSidebar
          activeItem={activeSection}
          onItemClick={handleSidebarClick}
          username={username}
          userRole={currentUserRole} // <<< Truy·ªÅn gi√° tr·ªã ƒë·ªçc tr·ª±c ti·∫øp
        />




        <main className="profile-main">
          {activeSection === "H·ªì s∆° c√° nh√¢n" && <PersonalProfileForm />}
          {activeSection === "ƒê·ªïi m·∫≠t kh·∫©u" && <ChangePassword />}


          {/* === T√çCH H·ª¢P OrderList V√ÄO TAB "ƒê∆°n h√†ng c·ªßa t√¥i" (ƒê√£ fix c√∫ ph√°p) === */}
          {activeSection === "ƒê∆°n h√†ng c·ªßa t√¥i" && (
            <OrderList />
          )}
          {/* === T√çCH H·ª¢P SELLER DOCUMENT VIEW (Ch·ªâ hi·ªÉn th·ªã khi ch·ªçn tab) === */}
          {activeSection === "Qu·∫£n l√Ω gi·∫•y t·ªù kinh doanh" && (
            <SellerDocumentView />
          )}


          {activeSection === "V√≠ ƒëi·ªán t·ª≠" && <PersonalEWallet />}
          {/* X√ìA: T·∫°m th·ªùi render DisputeForm v√†o tab G·ª≠i Khi·∫øu N·∫°i */}
          {activeSection === "G·ª≠i khi·∫øu n·∫°i" && (
            // KH√îNG C√íN G·ªåI DISPUTEFORM ·ªû ƒê√ÇY N·ªÆA
            <p>Form khi·∫øu n·∫°i ƒë√£ ƒë∆∞·ª£c t√≠ch h·ª£p v√†o L·ªãch s·ª≠ ƒë∆°n h√†ng.</p>
          )}


          {activeSection === "N√¢ng c·∫•p th√†nh ng∆∞·ªùi b√°n" && (
            <UpgradeToSeller
              onGoToProfile={() => setActiveSection("H·ªì s∆° c√° nh√¢n")}
              onKycAccepted={handleKycAccepted}
            />
          )}
          {/* Truy·ªÅn gi√° tr·ªã ƒë·ªçc tr·ª±c ti·∫øp xu·ªëng SellerBuyPackage */}
          {activeSection === "Mua g√≥i d·ªãch v·ª•" && <SellerBuyPackage userRole={currentUserRole} />}
        </main>
     </div>
   </div>
 );
}



