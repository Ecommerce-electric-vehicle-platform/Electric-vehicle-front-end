import React, { useEffect, useRef } from 'react';
import { createPortal } from 'react-dom';
import { X, Crown, DollarSign, Users, TrendingUp, ArrowRight } from 'lucide-react';
import './UpgradeConfirmationModal.css';

export function UpgradeConfirmationModal({ isOpen, onClose, onConfirm, isGuest = false }) {
    const scrollRef = useRef(0); // L∆∞u v·ªã tr√≠ cu·ªôn tr∆∞·ªõc khi m·ªü modal

    useEffect(() => {
        if (!isOpen) return;

        // üëâ L∆∞u v·ªã tr√≠ scroll hi·ªán t·∫°i
        scrollRef.current = window.scrollY;

        const prevOverflow = document.body.style.overflow;
        const prevPaddingRight = document.body.style.paddingRight;
        const prevPosition = document.body.style.position;
        const prevTop = document.body.style.top;
        const prevWidth = document.body.style.width;

        // T√≠nh to√°n chi·ªÅu r·ªông thanh cu·ªôn ƒë·ªÉ tr√°nh x√™ d·ªãch layout
        const scrollbarWidth = window.innerWidth - document.documentElement.clientWidth;
        if (scrollbarWidth > 0) {
            document.body.style.paddingRight = `${scrollbarWidth}px`;
        }

        // Kh√≥a scroll n·ªÅn
        document.body.style.overflow = 'hidden';
        document.body.style.position = 'fixed';
        document.body.style.top = `-${scrollRef.current}px`;
        document.body.style.width = '100%';

        return () => {
            // Kh√¥i ph·ª•c tr·∫°ng th√°i tr∆∞·ªõc ƒë√≥
            document.body.style.overflow = prevOverflow;
            document.body.style.paddingRight = prevPaddingRight;
            document.body.style.position = prevPosition;
            document.body.style.top = prevTop;
            document.body.style.width = prevWidth;

            // ‚úÖ ƒê·∫∑t l·∫°i v·ªã tr√≠ scroll ch√≠nh x√°c sau khi modal ƒë√≥ng
            // S·ª≠ d·ª•ng multiple attempts ƒë·ªÉ ƒë·∫£m b·∫£o scroll position ƒë∆∞·ª£c kh√¥i ph·ª•c
            const restoreScroll = () => {
                // S·ª≠ d·ª•ng behavior: 'instant' ƒë·ªÉ tr√°nh animation
                window.scrollTo({
                    top: scrollRef.current,
                    left: 0,
                    behavior: 'instant'
                });
            };

            // Th·ª±c hi·ªán ngay l·∫≠p t·ª©c
            restoreScroll();

            // Th·ª±c hi·ªán l·∫°i sau khi DOM ƒë∆∞·ª£c c·∫≠p nh·∫≠t
            setTimeout(restoreScroll, 0);
            setTimeout(restoreScroll, 10);
            setTimeout(restoreScroll, 50);

            // Th√™m m·ªôt l·∫ßn n·ªØa sau khi t·∫•t c·∫£ c√°c effect kh√°c ƒë√£ ch·∫°y
            requestAnimationFrame(() => {
                restoreScroll();
            });
        };
    }, [isOpen]);

    if (!isOpen) return null;

    const handleConfirm = () => {
        onConfirm?.();
        // ƒê·∫∑t flag ƒë·ªÉ b√°o hi·ªáu modal ƒëang ƒë√≥ng
        sessionStorage.setItem('fromUpgradeModal', 'true');
        onClose?.();
    };

    const handleCompare = () => {
        // ƒê·∫∑t flag ƒë·ªÉ b√°o hi·ªáu modal ƒëang ƒë√≥ng
        sessionStorage.setItem('fromUpgradeModal', 'true');
        onClose?.();
        window.location.href = '/compare-plans';
    };

    const portalTarget = document.getElementById('modal-root') || document.body;

    const handleOverlayClick = () => {
        // ƒê·∫∑t flag ƒë·ªÉ b√°o hi·ªáu modal ƒëang ƒë√≥ng
        sessionStorage.setItem('fromUpgradeModal', 'true');
        // NgƒÉn ch·∫∑n m·ªçi scroll event trong th·ªùi gian ng·∫Øn
        const preventScroll = (e) => {
            e.preventDefault();
            e.stopPropagation();
        };
        document.addEventListener('scroll', preventScroll, { passive: false });
        setTimeout(() => {
            document.removeEventListener('scroll', preventScroll);
        }, 100);
        onClose?.();
    };

    return createPortal(
        <div className="upgrade-confirmation-overlay" onClick={handleOverlayClick}>
            <div
                className="upgrade-confirmation-modal"
                onClick={(e) => e.stopPropagation()}
                style={{
                    position: 'fixed',
                    top: '50%',
                    left: '50%',
                    transform: 'translate(-50%, -50%)',
                    zIndex: 9999
                }}
            >
                {/* Header */}
                <div className="upgrade-confirmation-header">
                    <div className="upgrade-confirmation-header-content">
                        <div className="header-icon">
                            <Crown className="crown-icon" />
                        </div>
                        <h2 className="upgrade-confirmation-title">
                            {isGuest ? 'ƒêƒÉng nh·∫≠p ƒë·ªÉ tr·ªü th√†nh Ng∆∞·ªùi b√°n' : 'Tr·ªü th√†nh Ng∆∞·ªùi b√°n'}
                        </h2>
                        <button className="upgrade-confirmation-close" onClick={handleOverlayClick}>
                            <X size={20} />
                        </button>
                    </div>
                </div>

                {/* Content */}
                <div className="upgrade-confirmation-content">
                    <div className="main-message">
                        <h3 className="message-title">
                            {isGuest ? 'T·∫°o t√†i kho·∫£n ƒë·ªÉ b·∫Øt ƒë·∫ßu b√°n h√†ng' : 'ƒêƒÉng b√°n ch·ªâ trong v√†i b∆∞·ªõc'}
                        </h3>
                        <p className="message-description">
                            {isGuest
                                ? 'ƒêƒÉng k√Ω mi·ªÖn ph√≠ ƒë·ªÉ c√≥ t√†i kho·∫£n v√† tr·ªü th√†nh ng∆∞·ªùi b√°n chuy√™n nghi·ªáp'
                                : '∆Øu ti√™n hi·ªÉn th·ªã ‚Ä¢ TƒÉng uy t√≠n ‚Ä¢ Ti·∫øp c·∫≠n kh√°ch s·∫µn nhu c·∫ßu'
                            }
                        </p>
                    </div>

                    <div className="benefits-grid">
                        {isGuest ? (
                            <>
                                <div className="benefit-item">
                                    <div className="benefit-icon">
                                        <Users className="icon" />
                                    </div>
                                    <div className="benefit-content">
                                        <h5>T·∫°o t√†i kho·∫£n mi·ªÖn ph√≠</h5>
                                        <p>ƒêƒÉng k√Ω nhanh ch√≥ng v√† d·ªÖ d√†ng</p>
                                    </div>
                                </div>

                                <div className="benefit-item">
                                    <div className="benefit-icon">
                                        <DollarSign className="icon" />
                                    </div>
                                    <div className="benefit-content">
                                        <h5>Tr·ªü th√†nh ng∆∞·ªùi b√°n</h5>
                                        <p>N√¢ng c·∫•p ƒë·ªÉ ƒëƒÉng b√°n s·∫£n ph·∫©m</p>
                                    </div>
                                </div>

                                <div className="benefit-item">
                                    <div className="benefit-icon">
                                        <TrendingUp className="icon" />
                                    </div>
                                    <div className="benefit-content">
                                        <h5>Ki·∫øm thu nh·∫≠p</h5>
                                        <p>B√°n h√†ng v√† t·∫°o ngu·ªìn thu</p>
                                    </div>
                                </div>
                            </>
                        ) : (
                            <>
                                <div className="benefit-item">
                                    <div className="benefit-icon">
                                        <DollarSign className="icon" />
                                    </div>
                                    <div className="benefit-content">
                                        <h5>ƒêƒÉng b√°n ngay</h5>
                                        <p>Nhanh ch√≥ng ti·∫øp c·∫≠n kh√°ch h√†ng</p>
                                    </div>
                                </div>

                                <div className="benefit-item">
                                    <div className="benefit-icon">
                                        <Users className="icon" />
                                    </div>
                                    <div className="benefit-content">
                                        <h5>∆Øu ti√™n hi·ªÉn th·ªã</h5>
                                        <p>TƒÉng l∆∞·ª£t xem & li√™n h·ªá</p>
                                    </div>
                                </div>

                                <div className="benefit-item">
                                    <div className="benefit-icon">
                                        <TrendingUp className="icon" />
                                    </div>
                                    <div className="benefit-content">
                                        <h5>Uy t√≠n c·ª≠a h√†ng</h5>
                                        <p>G·∫Øn nh√£n ng∆∞·ªùi b√°n</p>
                                    </div>
                                </div>
                            </>
                        )}
                    </div>

                    <div className="upgrade-confirmation-actions">
                        <button
                            className="upgrade-confirmation-btn-primary"
                            onClick={handleConfirm}
                        >
                            <span>{isGuest ? 'ƒêƒÉng nh·∫≠p / ƒêƒÉng k√Ω' : 'N√¢ng c·∫•p ngay'}</span>
                            <ArrowRight size={16} />
                        </button>
                        {!isGuest && (
                            <button
                                className="upgrade-confirmation-btn-secondary"
                                onClick={handleCompare}
                            >
                                So s√°nh g√≥i
                            </button>
                        )}
                    </div>
                </div>
            </div>
        </div>,
        portalTarget
    );
}
