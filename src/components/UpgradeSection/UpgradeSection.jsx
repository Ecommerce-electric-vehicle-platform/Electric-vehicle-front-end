import React, { useEffect, useRef, useState } from "react";
import {
  CheckCircle,
  Shield,
  Store,
  Image as ImageIcon,
  Sparkles,
  Headphones,
  Clock,
  TrendingUp,
  Crown,
} from "lucide-react";
import { useNavigate, useLocation } from "react-router-dom";
import { UpgradeConfirmationModal } from "../UpgradeConfirmationModal/UpgradeConfirmationModal";
import "./UpgradeSection.css";

export function UpgradeSection({ requireAuth = false }) {
  const sectionRef = useRef(null);
  const openedViaURLRef = useRef(false);
  const [showUpgradeModal, setShowUpgradeModal] = useState(false);
  const navigate = useNavigate();
  const location = useLocation();

  // ü™Ñ Hi·ªáu ·ª©ng fade-in khi section v√†o viewport
  useEffect(() => {
    const observer = new IntersectionObserver(
      (entries) => {
        entries.forEach((entry) => {
          if (entry.isIntersecting) {
            entry.target.classList.add("section-visible");
          }
        });
      },
      { threshold: 0.3 }
    );

    const currentSection = sectionRef.current;
    if (currentSection) observer.observe(currentSection);

    return () => {
      if (currentSection) observer.unobserve(currentSection);
    };
  }, []);

  // üåê Global trigger t·ª´ URL ho·∫∑c h√†m ngo√†i (ch·ªâ scroll khi t·ª´ URL)
  useEffect(() => {
    const scrollToSection = () => {
      const el = sectionRef.current;
      if (el) el.scrollIntoView({ behavior: "smooth", block: "center" });
    };

    // Global function ƒë·ªÉ m·ªü modal t·ª´ b√™n ngo√†i (c√≥ th·ªÉ scroll)
    window.openUpgradePlans = () => {
      scrollToSection();
      setTimeout(() => setShowUpgradeModal(true), 450);
    };

    // Ch·ªâ scroll khi c√≥ hash ho·∫∑c param t·ª´ URL
    const params = new URLSearchParams(location.search);
    const hasHash = location.hash === "#upgrade" || location.hash === "#upgrade-section";
    const wantsOpen = params.get("openUpgrade") === "1";
    if ((hasHash || wantsOpen) && !openedViaURLRef.current) {
      openedViaURLRef.current = true;
      scrollToSection();
      if (wantsOpen) {
        setTimeout(() => setShowUpgradeModal(true), 450);
      }
    }

    return () => {
      try {
        delete window.openUpgradePlans;
      } catch {
        /* noop */
      }
    };
  }, [location, requireAuth]);

  const packages = [
    {
      id: "standard",
      name: "Standard Package",
      tagline: "Ph√π h·ª£p c√° nh√¢n d√πng th·ª≠",
      icon: "‚≠ê",
      featured: false,
      benefits: [
        { icon: Store, text: "T·ªëi ƒëa 10 s·∫£n ph·∫©m, 5 ·∫£nh/s·∫£n ph·∫©m" },
        { icon: TrendingUp, text: "Hi·ªÉn th·ªã c∆° b·∫£n trong danh m·ª•c & t√¨m ki·∫øm" },
        {
          icon: Headphones,
          text: "H·ªó tr·ª£ email/chat, ph·∫£n h·ªìi ti√™u chu·∫©n (~7% ph√≠)",
        },
      ],
      monthlyPrice: 200000,
    },
    {
      id: "pro",
      name: "Pro Package",
      tagline: "D√†nh cho c·ª≠a h√†ng nh·ªè",
      icon: "üåü",
      featured: true,
      benefits: [
        { icon: Store, text: "T·ªëi ƒëa 30 s·∫£n ph·∫©m, 7 ·∫£nh/s·∫£n ph·∫©m" },
        {
          icon: Sparkles,
          text: "∆Øu ti√™n hi·ªÉn th·ªã trong danh m·ª•c (tr√™n Standard)",
        },
        {
          icon: Headphones,
          text: "H·ªó tr·ª£ nhanh (email/chat, hotline gi·ªù h√†nh ch√≠nh) ~5% ph√≠",
        },
      ],
      monthlyPrice: 400000,
    },
    {
      id: "vip",
      name: "VIP Package",
      tagline: "Cho doanh nghi·ªáp",
      icon: "üèÜ",
      featured: false,
      benefits: [
        {
          icon: ImageIcon,
          text: "T·ªëi ƒëa 100 s·∫£n ph·∫©m, 10 ·∫£nh/s·∫£n ph·∫©m; duy·ªát ∆∞u ti√™n",
        },
        {
          icon: Crown,
          text: "∆Øu ti√™n cao trong t√¨m ki·∫øm; hi·ªÉn th·ªã logo th∆∞∆°ng hi·ªáu",
        },
        {
          icon: Shield,
          text: "H·ªó tr·ª£ ∆∞u ti√™n 24/7, ph·∫£n h·ªìi nhanh nh·∫•t (~3% ph√≠)",
        },
      ],
      monthlyPrice: 1200000,
    },
  ];

  // üîÅ Billing toggle: th√°ng / qu√Ω / nƒÉm
  const [billingCycle, setBillingCycle] = useState("month"); // 'month' | 'quarter' | 'year'
  const billingMeta = {
    month: { label: "Th√°ng", months: 1, discount: 0 },
    quarter: { label: "Qu√Ω", months: 3, discount: 0.1 },
    year: { label: "NƒÉm", months: 12, discount: 0.2 },
  };

  const formatVND = (n) =>
    new Intl.NumberFormat("vi-VN", {
      style: "currency",
      currency: "VND",
    }).format(n);

  // üü¢ Khi click: m·ªü modal ngay, KH√îNG cu·ªôn trang
  const handleUpgrade = () => {
    // ‚úÖ Hi·ªÉn th·ªã modal t·ª©c th√¨ t·∫°i v·ªã tr√≠ hi·ªán t·∫°i
    setShowUpgradeModal(true);
  };

  const handleConfirmUpgrade = () => {
    if (requireAuth) {
      // N·∫øu l√† guest, ƒëi·ªÅu h∆∞·ªõng ƒë·∫øn trang ƒëƒÉng nh·∫≠p
      navigate("/signin");
    } else {
      // N·∫øu ƒë√£ ƒëƒÉng nh·∫≠p, ƒëi·ªÅu h∆∞·ªõng ƒë·∫øn trang profile ƒë·ªÉ n√¢ng c·∫•p
      navigate("/profile?tab=upgrade");
    }
  };

  const handleCloseModal = () => {
    setShowUpgradeModal(false);
  };


  return (
    <section id="upgrade" className="upgrade-section" ref={sectionRef}>
      <div className="upgrade-container">
        <div className="upgrade-header">
          <h2 className="upgrade-title">N√¢ng c·∫•p t√†i kho·∫£n c·ªßa b·∫°n</h2>
          <p className="upgrade-subtitle">
            T·ª´ ng∆∞·ªùi mua h√†ng th√†nh ng∆∞·ªùi b√°n h√†ng chuy√™n nghi·ªáp
          </p>
        </div>

        {/* Billing toggle */}
        <div
          className="billing-toggle"
          role="tablist"
          aria-label="Ch·ªçn chu k·ª≥ thanh to√°n"
        >
          {Object.entries(billingMeta).map(([key, meta]) => (
            <button
              key={key}
              role="tab"
              aria-selected={billingCycle === key}
              className={`toggle-btn ${billingCycle === key ? "active" : ""}`}
              onClick={() => setBillingCycle(key)}
            >
              {meta.label}
            </button>
          ))}
        </div>

        <div className="packages-grid">
          {packages.map((pkg) => (
            <div
              key={pkg.id}
              className={`package-card ${pkg.featured ? "featured" : ""}`}
              onClick={handleUpgrade}
              role="button"
              tabIndex={0}
              onKeyDown={(e) => {
                if (e.key === "Enter" || e.key === " ") handleUpgrade();
              }}
            >
              {pkg.featured && (
                <div className="featured-badge">
                  <span>KHUY·∫æN M√ÉI</span>
                </div>
              )}

              <div className="package-header">
                <div className="package-icon">{pkg.icon}</div>
                <h3 className="package-name">{pkg.name}</h3>
                {pkg.tagline && (
                  <div className="package-tagline">{pkg.tagline}</div>
                )}
              </div>

              <div className="package-divider">
                <svg viewBox="0 0 200 20" className="wave-divider">
                  <path
                    d="M0,10 Q50,0 100,10 T200,10 L200,20 L0,20 Z"
                    fill="white"
                  />
                </svg>
              </div>

              <div className="package-content">
                <ul className="features-list">
                  {pkg.benefits.map((benefit, index) => {
                    const Icon = benefit.icon || CheckCircle;
                    return (
                      <li key={index} className="feature-item">
                        <Icon
                          size={18}
                          color="#10b981"
                          style={{ marginRight: 8 }}
                        />
                        <span className="feature-text">
                          {benefit.text || benefit}
                        </span>
                      </li>
                    );
                  })}
                </ul>

                {/* dynamic price by billing cycle */}
                {(() => {
                  const meta = billingMeta[billingCycle];
                  const subtotal = pkg.monthlyPrice * meta.months;
                  const discountAmount = subtotal * meta.discount;
                  const total = subtotal - discountAmount;
                  const hasDiscount = meta.discount > 0;
                  return (
                    <div className="dynamic-price">
                      <div className="price-line">
                        <span className="duration-label">{meta.label}</span>
                        <span className="price-value">{formatVND(total)}</span>
                      </div>
                      {hasDiscount && (
                        <div className="save-ribbon">
                          Ti·∫øt ki·ªám {Math.round(meta.discount * 100)}%
                        </div>
                      )}
                    </div>
                  );
                })()}

                <button className="upgrade-button" onClick={handleUpgrade}>
                  <span className="button-icon">üí≥</span>
                  <span className="button-text">N√¢ng c·∫•p ngay</span>
                </button>
              </div>
            </div>
          ))}
        </div>
      </div>

      {/* Modal n√¢ng c·∫•p */}
      <UpgradeConfirmationModal
        isOpen={showUpgradeModal}
        onClose={handleCloseModal}
        onConfirm={handleConfirmUpgrade}
        isGuest={requireAuth}
        anchorRef={sectionRef}
      />
    </section>
  );
}
