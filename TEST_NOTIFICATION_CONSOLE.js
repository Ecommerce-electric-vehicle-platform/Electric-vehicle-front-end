// ==================================================
// üß™ TEST NOTIFICATION - Copy & Paste v√†o Console
// ==================================================

console.log("üß™ Starting Notification Test...");
console.log("=".repeat(50));

// 1. Ki·ªÉm tra Auth Status
console.log("\nüìã Step 1: Check Auth Status");
console.log("-".repeat(50));
const token = localStorage.getItem("token");
const buyerId = localStorage.getItem("buyerId");
const authType = localStorage.getItem("authType");
const username = localStorage.getItem("username");

console.log("‚úì Token:", token ? `${token.substring(0, 20)}...` : "‚ùå KH√îNG C√ì");
console.log("‚úì buyerId:", buyerId || "‚ùå KH√îNG C√ì");
console.log("‚úì authType:", authType || "guest");
console.log("‚úì username:", username || "N/A");

if (!token) {
  console.error("‚ùå KH√îNG C√ì TOKEN! Vui l√≤ng ƒëƒÉng nh·∫≠p tr∆∞·ªõc.");
  throw new Error("No token");
}

if (authType === "admin") {
  console.warn("‚ö†Ô∏è ƒêang login b·∫±ng ADMIN account. Notification ch·ªâ ho·∫°t ƒë·ªông cho USER (buyer).");
}

// 2. Ki·ªÉm tra API Endpoint
console.log("\nüìã Step 2: Test API Endpoint");
console.log("-".repeat(50));

fetch('http://localhost:5173/api/v1/notifications', {
  headers: {
    'Authorization': `Bearer ${token}`,
    'Content-Type': 'application/json'
  }
})
.then(response => {
  console.log("‚úì Status:", response.status);
  if (!response.ok) {
    throw new Error(`HTTP ${response.status}`);
  }
  return response.json();
})
.then(data => {
  console.log("‚úì Response Data:", data);
  console.log("‚úì Notifications Count:", data.length);
  
  if (data.length === 0) {
    console.warn("‚ö†Ô∏è KH√îNG C√ì NOTIFICATION N√ÄO!");
    console.log("\nüí° C√≥ th·ªÉ do:");
    console.log("  1. Backend ch∆∞a t·∫°o notification cho user n√†y");
    console.log("  2. receiverId trong DB kh√¥ng kh·ªõp v·ªõi buyerId:", buyerId);
    console.log("\nüîç Ki·ªÉm tra trong DB:");
    console.log(`  SELECT * FROM notifications WHERE receiverId = ${buyerId};`);
  } else {
    console.log("\nüì¨ Notifications:");
    data.forEach((notif, index) => {
      console.log(`\n--- Notification ${index + 1} ---`);
      console.log("  ID:", notif.notificationId);
      console.log("  receiverId:", notif.receiverId);
      console.log("  Title:", notif.title);
      console.log("  Content:", notif.content);
      console.log("  readAt:", notif.readAt || "null (ch∆∞a ƒë·ªçc)");
      console.log("  createdAt:", notif.createdAt);
      
      // Ki·ªÉm tra receiverId
      if (notif.receiverId.toString() !== buyerId) {
        console.error("  ‚ùå receiverId KH√îNG KH·ªöP v·ªõi buyerId!");
        console.error(`     receiverId: ${notif.receiverId}`);
        console.error(`     buyerId: ${buyerId}`);
      } else {
        console.log("  ‚úÖ receiverId kh·ªõp v·ªõi buyerId");
      }
      
      // Ki·ªÉm tra ƒë√£ ƒë·ªçc ch∆∞a
      if (notif.readAt) {
        console.warn("  ‚ö†Ô∏è Notification n√†y ƒê√É ƒê·ªåC ‚Üí S·∫Ω kh√¥ng hi·ªán popup");
      } else {
        console.log("  ‚úÖ Ch∆∞a ƒë·ªçc ‚Üí S·∫Ω hi·ªán popup n·∫øu l√† m·ªõi");
      }
    });
  }
})
.catch(error => {
  console.error("‚ùå API ERROR:", error);
  console.log("\nüí° C√≥ th·ªÉ do:");
  console.log("  1. Backend ch∆∞a ch·∫°y");
  console.log("  2. Token h·∫øt h·∫°n (login l·∫°i)");
  console.log("  3. CORS issue");
  console.log("  4. Endpoint sai");
});

// 3. Test Transform Function
console.log("\nüìã Step 3: Test Transform Logic");
console.log("-".repeat(50));

const testNotif = {
  notificationId: 999,
  receiverId: parseInt(buyerId),
  type: "BUYER",
  title: "Test - Ph√™ duy·ªát th√†nh c√¥ng",
  content: "ƒê√¢y l√† test notification",
  readAt: null,
  createdAt: new Date().toISOString()
};

console.log("Mock notification:", testNotif);

// Detect type
const text = (testNotif.title + " " + testNotif.content).toLowerCase();
let detectedType = "info";
if (text.includes("ph√™ duy·ªát") || text.includes("th√†nh c√¥ng")) {
  detectedType = "success";
}
console.log("‚úì Detected type:", detectedType);

// Transform
const transformed = {
  notificationId: testNotif.notificationId,
  title: testNotif.title,
  message: testNotif.content,
  type: detectedType,
  isRead: !!testNotif.readAt,
  createdAt: testNotif.createdAt,
  receiverId: testNotif.receiverId
};

console.log("‚úì Transformed:", transformed);

// 4. Summary
console.log("\nüìã Summary");
console.log("=".repeat(50));
console.log("‚úì Auth:", token ? "OK" : "FAIL");
console.log("‚úì buyerId:", buyerId || "N/A");
console.log("‚úì authType:", authType);
console.log("\nüí° Next Steps:");
console.log("  1. Xem console c√≥ log üì° [Notification] Polling... m·ªói 10s kh√¥ng?");
console.log("  2. Xem Network tab c√≥ request GET /api/v1/notifications kh√¥ng?");
console.log("  3. N·∫øu kh√¥ng c√≥ notification, check DB c√≥ record v·ªõi receiverId =", buyerId);
console.log("  4. N·∫øu c√≥ notification nh∆∞ng kh√¥ng hi·ªán, check readAt = null?");
console.log("\nüîß ƒê·ªÉ test th·ªß c√¥ng:");
console.log("  - M·ªü Network tab");
console.log("  - ƒê·ª£i 10 gi√¢y");
console.log("  - T√¨m request GET /api/v1/notifications");
console.log("  - Check Response");

console.log("\n" + "=".repeat(50));
console.log("‚úÖ Test completed!");

